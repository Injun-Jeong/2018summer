//학습목표
- 텐서플로우의 기초 개념을 학습
- 텐서플로우의 LinearRegressor 클래스를 사용하여 입력 특성 하나를 기반으로 지역별 주택 가격 중앙값을 예측
- 평균 제곱근 오차(RMSE)를 사용하여 모델 예측의 정확성을 평가
- 초매개변수를 조정하여 모델의 정확성을 개선

//필요한 라이브러리 로드
	from __future__ import print_function

	import math

	from IPython import display
	from matplotlib import cm
	from matplotlib import gridspec
	from matplotlib import pyplot as plt
	import numpy as np
	import pandas as pd
	from sklearn import metrics
	import tensorflow as tf
	from tensorflow.python.data import Dataset

	tf.logging.set_verbosity(tf.logging.ERROR)
	pd.options.display.max_rows = 10
	pd.options.display.float_format = '{:.1f}'.format

//데이터 조사
- 데이터를 본격적으로 다루기 전에 잠시 살펴보는 것이 좋음

//첫 번째 모델 만들기
- 이 실습에서는 라벨(타겟이라고도 함) 역할을 하는 median_house_value에 대한 예측을 시도
- 참고: 데이터는 지역 단위이므로 이 특성은 해당 지역의 전체 방 수를 나타냄
- 모델을 학습시키려면 텐서플로우 Estimator API가 제공하는 LinearRegressor 인터페이스를 사용
- 이 API는 저수준 모델 작업을 알아서 처리하고 모델 학습, 평가, 추론을 수행하는 데 편리하게 사용되는 메소드를 노출

//1단계: 특성 정의 및 특성 열 구성
- 학습 데이터를 텐서플로우로 가져오려면 각 특성에 들어있는 데이터 유형을 지정
- 이 실습과 이후 실습에서는 주로 2가지 데이터 유형을 사용
  - 범주형 데이터: 텍스트로 이루어진 데이터. 이 실습의 주택 데이터 세트는 범주형 데이터를 포함하지 않지만 주택 양식, 부동산 광고 문구 등의 예를 보게 될 수도 있음
  - 수치 데이터: 정수 또는 부동 소수점 숫자이며 숫자로 취급하려는 데이터. 이후에도 설명하겠지만, 우편번호 등의 수치 데이터는 범주형으로 취급하는 경우도 있음
    - 무조건 숫자라고 해서 수치 데이터인 것은 아님
- 텐서플로우에서 특성의 데이터 유형을 지정하려면 특성 열이라는 구조체를 사용
  - 특성 열은 특성 데이터에 대한 설명만 저장하며 특성 데이터 자체는 포함하지 않음
	feature_columns = [tf.feature_column.numeric_column("total_rooms")]	// 우선은 total_rooms라는 수치 입력 데이터 하나만 사용

//2단계: 타겟 정의
- 이 예시에서는 타겟인 median_house_value를 정의
- 이 데이터도 california_housing_dataframe에서 가져옴
	targets = california_housing_dataframe["median_house_value"]

//3단계: LinearRegressor 구성
- LinearRegressor를 사용하여 선형 회귀 모델을구성
- 미니 배치 확률적 경사하강법(SGD)을 구현하는 GradientDescentOptimizer를 사용하여 이 모델을 학습시킬 것
- learning_rate(학습률) 인수는 경사 단계의 크기를 조절
  - 경사(gradient): 모든 독립 변수를 기준으로 한 편미분의 벡터. 머신러닝에서 경사는 모델 함수의 편미분의 벡터.  경사는 가장 급격한 상승 방향을 가리킴
- 참고: 안전을 위해 옵티마이저에 clip_gradients_by_norm을 통해 경사 제한을 적용. 경사 제한은 학습 중에 경사가 너무 커져서 경사하강법이 실패하는 경우가 나타나지 않도록 제한 
  - 경사 제한(gradient clipping): 경사 값을 적용하기 전에 제한. 경사 제한은 수치적 안정성을 보장하고 경사 발산을 예방하는 데 도움
	# Use gradient descent as the optimizer for training the model.
	my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.0000001)	// 학습률: 0.0000001
	my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)

	# Configure the linear regression model with our feature columns and optimizer.
	# Set a learning rate of 0.0000001 for Gradient Descent.
	linear_regressor = tf.estimator.LinearRegressor(feature_columns=feature_columns, optimizer=my_optimizer)

//4단계: 입력 함수 정의




























