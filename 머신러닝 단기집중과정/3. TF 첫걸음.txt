//TensorFlow.org API 페이지
- 위의 페이지에서 코드에 쓸 수 있는 낮은 수준의 텐서플로우 연산자를 확인할 수 있음
- 일반적인 작업을 더 쉽게 만드는 높은 수준의 프레임워크도 있음
- 그 중에서도 신경망 모델을 쉽게 개발할 수 있게 해주는 TensorFlow Estimators API를 많이 사용할 것임

//텐서플로우 도구함의 현재 계층구조

	TensorFlow Estimators	// 높은 수준의 객체 지향 API
	tf.layers, tf.losses, tf.metrics	// 일반 모델 구성요소용 재사용 가능 라이브러리
	TensorFlow Python		// C++ 커널을 래핑하는 오퍼레이션 제공
	TensorFlow C++
	CPU	GPU	TPU	// 커널을 하나 이상의 플랫폼에서 작동

//요약
도구함			설명
tf.estimator		높은 수준의 OOP API
tf.layers/tf.losses/tf.metrics	일반 모델 구성요소용 라이브러리
텐서플로우		낮은 수준의 API

//텐서플로우는 다음 두 요소로 구성
- 그래프 프로토콜 버퍼
- 분산된 그래프를 실행하는 런타임
- 이 두 구성요소는 자바 컴파일러 및 JVM과 유사
- JVM이 여러 하드웨어 플랫폼에서 구현되는 것과 마찬가지로 텐서플로우도 여러 CPU와 GPU에서 구현

//어느 API를 사용?
-  문제를 해결하는 최고 수준의 추상화를 사용해야 함
- 추상화 수준이 높을수록 더 사용하기 쉽지만 (설계상) 유연성이 떨어짐
- 먼저 최고 수준의 API로 시작하여 모든 작업을 실행하는 것이 좋음
- 특별한 모델링 문제를 해결하기 위해 더 유연한 추상화가 필요하면 한 수준 아래로 이동
- 각 수준은 낮은 수준의 API를 사용하여 제작되므로 계층구조를 낮추는 것이 합리적

//tf.estimator API
- 머신러닝 단기집중과정 내 대부분의 실습에서 tf.estimator를 사용
- 낮은 수준의(원시) 텐서플로우를 사용해도 실습의 모든 작업을 실행할 수 있지만 tf.estimator를 사용하면 코드 행 수가 크게 줄어듬
- tf.estimator는 scikit-learn API와 호환됨
  -  scikit-learn: Python의 매우 인기 있는 오픈소스 ML 라이브러리로, Google 직원을 비롯하여 100,000명이 넘는 사람들이 이용
- tf.estimator로 구현된 선형 회귀 프로그램의 형식은 대체로 다음과 같음

	import tensorflow as tf

	# Set up a linear classifier.
	classifier = tf.estimator.LinearClassifier()

	# Train the model on some example data.
	classifier.train(input_fn=train_input_fn, steps=2000)

	# Use it to predict.
	predictions = classifier.predict(input_fn=predict_input_fn)

//주요 용어
- 에스티메이터(Estimator)
  - tf.Estimator 클래스의 인스턴스
  - 텐서플로우 그래프를 작성하고 텐서플로우 세션(session)을 실행하는 로직을 캡슐화
  - 맞춤 에스티메이터를 직접 만들거나 다른 사용자가 만든 사전 제작된 에스티메이터를 인스턴스화할 수 있음
- 그래프(graph)
  - 텐서플로우에서는 계산 사양을 의미
  - 그래프의 노드는 연산을 의미
  - 엣지는 방향성을 가지며, 연산의 결과(텐서)를 다른 연산의 피연산자로 전달함을 의미
  - 텐서보드를 사용하여 그래프를 시각화할 수 있음
- 텐서(Tensor)
  - 텐서플로우 프로그램의 기본 데이터 구조
  - 텐서는 대부분 스칼라, 벡터 또는 행렬로 이루어진 N차원 데이터 구조이며, N은 매우 큰 수일 수 있음
  -  텐서의 요소는 정수, 부동 소수점 또는 문자열 값을 포함할 수 있음

//머신러닝 단기집중과정 실습에서 자주 사용되는 초매개변수
- 많은 코딩 실습에 다음과 같은 초매개변수가 포함
  - steps: 총 학습 반복 횟수. 한 단계에서 한 배치의 손실을 계산한 후, 이 값을 사용하여 모델의 가중치를 한 번 수정
  - batch size: 하나의 단계와 관련된 예시의 수(임의로 선택됨). 예를 들어 SGD의 batch size는 1
- 아래의 수식이 적용됨
	total number of trained examples = batch size * steps

//머신러닝 단기집중과정 실습에서 편리하게 사용할 수 있는 변수
- 여러 실습에 다음과 같은 편의 변수가 포함
  - periods: 보고의 세부사항을 제어. 예를 들어 periods가 7로 설정되고 steps가 70으로 설정되면 실습에서 10단계마다(또는 7번) 손실 값을 출력. 초매개변수와 달리 periods의 값을 수정하지 않아도 됨. periods를 수정해도 모델이 학습하는 내용은 변경되지 않음.
- 아래의 수식이 적용됨
	number of training examples in each period = (batch size * steps)/periods

//주요 용어
- 세션(session): 텐서플로우 프로그램 내에서 변수 등의 상태를 유지
- 텐서(Tensor): 텐서플로우 프로그램의 기본 데이터 구조













