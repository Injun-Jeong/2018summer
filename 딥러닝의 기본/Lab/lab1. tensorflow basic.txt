tensorflow
- numerical computation using data flow graphs
- python



what is a data flow graph?
- node들은 하나의 operation, edge들은 data(tensor)



tensorflow hello world!
[code]
import tensorflow as tf
hello = tf.constant("hello, tensorflow")		// hello라는 node 생성
sess = tf.Session()				// node를 통해 원하는 결과를 얻기 위해선 session을 생성해야 함
print(sess.run(hello))			// session을 통해 node를 실행(출력)

cf. 위와 같이 실행 시, b'hello, tensorflow' 라는 결과를 확인할 수 있음. 여기서 b란, bytes literals를 의미하는 것이니 오류가 아니므로 걱정할 필요 없음



computational graph
[code]
import tensorflow as tf
#build graph using tensorflow operations
node1 = tf.constant(3.0, tf.float32)		// tf.float32와 tf.int32가 대부분 사용됨
node2 = tf.constatn(4.0)			// also tf.float32 implicitly
node3 = tf.add(node1, node2)

#feed data and run graph (opearation)
sess = tf.Session()

#update variables in the graph (and return values)
print("sess.run(node1, node2)", sess.run([node1, node2])



placeholder
- node를 만들어 놓은 상태에서 후에 데이터를 집어 넣고 싶을 때 placeholder을 사용
- 데이터를 입력할 때는 feed_dict를 사용***
[code]
import tensorflow as tf
a = tf.placeholder(tf.float32)
b = tf.placeholder(tf.float32)
adder_node = a + b
sess = Session()
print(sess.run(adder_node, feed_dict={a: 3, b: 4.5}))
print(sess.run(adder_node, feed_dict={a: [1, 3], b: [2, 4]}))

[output]
7.5
[3. 7.]



tensor ranks
- 차원
  ex. t = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] -> rank = 2	(m.t.) 쉽게 가장 바깥 쪽의 '[' 개수 세면 될 듯



shapes
- shape을 아는 것은 중요하다고 함
  ex. t = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] -> [3, 3]
      앞의 3은 []가 몇 개 인지, 뒤의 3은 []안에 몇 개 인지
       t= [ [ [1, 2], [3, 4] ], [ [4, 5], [6, 7] ], [ [8, 9], [10, 11] ] ] -> [3, 2, 2]













